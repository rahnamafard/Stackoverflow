@model QuestionPageModel
@inject StackContext db

@using Microsoft.AspNetCore.Identity;
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = "Show";
 Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@Html.DisplayFor(model => model.Question.Title)</h1>

<div>
    <h4>Question</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayFor(model => model.Questioner)
        </dt>

        <dd class="col-sm-7">
            @Html.DisplayFor(model => model.Question.Content)
        </dd>

        @if (UserManager.GetUserId(User) != Model.Question.UserId)
        {
            var x = new QuestionLike()
            {
                UserId = UserManager.GetUserId(User),
                QuestionId = Model.Question.QuestionId
            };


            <dt class="col-sm-3">
                <form method="post" asp-action="upVoteQuestion" asp-controller="Question" class="d-inline">
                    <input type="hidden" name="UserId" value="@x.UserId" />
                    <input type="hidden" name="QuestionId" value="@x.QuestionId" />
                    <input type="submit" value="@ViewData["upVoteValue"]" class="btn @ViewData["upVoteClass"]" />
                </form>
                <form method="post" asp-action="downVoteQuestion" asp-controller="Question" class="d-inline">
                    <input type="hidden" name="UserId" value="@x.UserId" />
                    <input type="hidden" name="QuestionId" value="@x.QuestionId" />
                    <input type="submit" value="@ViewData["downVoteValue"]" class="btn @ViewData["downVoteClass"]" />
                </form>
            </dt>
        }
    </dl>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
<br />

<div>
    @if (Model.Answers != null && Model.Answers.Count != 0)
    {
        <h4>Answers</h4>
        <hr />
        @foreach (var item in Model.Answers)
        {

            var x = new AnswerLike()
            {
                UserId = UserManager.GetUserId(User),
                AnswerId = item.Id
            };

            string upVoteValue = "Like (" + db.AnswerLikes.Where(a => a.AnswerId == item.Id).ToList().Count() + ")";
            string upVoteClass = "btn-outline-success";
            int numOfLikes = db.AnswerLikes.Where(l => l.UserId == UserManager.GetUserId(User) && l.AnswerId == item.Id).Count();
            if (numOfLikes > 0)
            {
                upVoteValue = "Liked (" + db.AnswerLikes.Where(a => a.AnswerId == item.Id).ToList().Count() + ")";
                upVoteClass = "btn-success";
            }

            string downVoteValue = "Dislike (" + db.AnswerDislikes.Where(a => a.AnswerId == item.Id).ToList().Count() + ")";
            string downVoteClass = "btn-outline-danger";
            int numOfDislikes = db.AnswerDislikes.Where(l => l.UserId == UserManager.GetUserId(User) && l.AnswerId == item.Id).Count();
            if (numOfDislikes > 0)
            {
                downVoteValue = "Disliked (" + db.AnswerDislikes.Where(a => a.AnswerId == item.Id).ToList().Count() + ")";
                downVoteClass = "btn-danger";
            }


        <dl class="row">
            <dt class="col-sm-2">
                @db.Users.Find(item.UserId).UserName
            </dt>
            <dd class="col-sm-7">
                @Html.DisplayFor(modelItem => item.Content)
            </dd>

            @if (UserManager.GetUserId(User) != item.UserId)
            {
                
                <dt class="col-sm-3">
                    <form method="post" asp-action="upVoteAnswer" asp-controller="Question" class="d-inline">
                        <input type="hidden" name="UserId" value="@x.UserId" />
                        <input type="hidden" name="AnswerId" value="@x.AnswerId" />
                        <input type="submit" value="@upVoteValue" class="btn @upVoteClass" />
                    </form>
                    <form method="post" asp-action="downVoteAnswer" asp-controller="Question" class="d-inline">
                        <input type="hidden" name="UserId" value="@x.UserId" />
                        <input type="hidden" name="AnswerId" value="@x.AnswerId" />
                        <input type="submit" value="@downVoteValue" class="btn @downVoteClass" />
                    </form>
                </dt>

            }

        </dl>
        }
    }
</div>

<div>
    <h4>Your answer</h4>
    <hr />
    <dl class="row">
        <dt class="col-md-8">
            <form method="post" asp-action="Answer">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <textarea asp-for="@Model.newAnswer.Content" class="form-control"></textarea>
                    <span asp-validation-for="@Model.newAnswer.Content" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="hidden" asp-for="@Model.newAnswer.QuestionId" value="@Model.Question.QuestionId" />
                    <span asp-validation-for="@Model.newAnswer.QuestionId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Answer" class="btn btn-primary" />
                </div>
            </form>
        </dt>
    </dl>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

